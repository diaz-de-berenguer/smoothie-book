type Smoothie {
  id: ID!
  name: String!
  recipe: Recipe
  rating: Rating
}

type Rating {
  value: Int
  count: Int!
}

type Recipe {
  id: ID!
  smoothieId: ID!
  ingredients: [Ingredient]
  instructions: String
}

type Ingredient {
  id: ID!
  recipeId: ID!
  name: String!
  quantity: String!
}

input NewSmoothie {
  name: String!
  ingredients: [NewIngredient]!
  instructions: String
}

input NewIngredient {
  name: String!
  quantity: String!
}

type Query {
  getSmoothies(limit: Int = 10, page: Int = 1): SmoothieConnection!
  getSmoothie(id: ID!): Smoothie
}

type Mutation {
  createSmoothie(input: NewSmoothie!): Smoothie!
  deleteSmoothie(smoothieId: ID!): Smoothie!
  addRating(smoothieId: ID!, value: Int!): Smoothie!
  resetData: Boolean!
}

type SmoothieConnection {
  totalCount: Int!
  nodes: [Smoothie]
}
